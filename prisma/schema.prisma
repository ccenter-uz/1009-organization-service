// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id                   Int                    @id @default(autoincrement())
  staffNumber          String?                @map("staff_number") @db.VarChar(40)
  status               Int                    @default(1) @db.SmallInt()
  regionId             Int                    @map("region_id")
  cityId               Int                    @map("city_id")
  districtId           Int?                   @map("district_id")
  orderNumber          Int?                   @map("order_number")
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamp
  updatedAt            DateTime?              @updatedAt @map("updated_at")
  deletedAt            DateTime?              @updatedAt @map("deleted_at")
  sub_categories       SubCategory[]
  CategoryTranslations CategoryTranslations[]

  city     City?     @relation(fields: [cityId], references: [id])
  region   Region?   @relation(fields: [regionId], references: [id])
  district District? @relation(fields: [districtId], references: [id])

  @@map("category")
}

model CategoryTranslations {
  id           Int       @id @default(autoincrement())
  categoryId   Int       @map("category_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  category Category @relation(fields: [categoryId], references: [id])

  @@map("category_translations")
}

model SubCategory {
  id          Int       @id @default(autoincrement())
  staffNumber String?   @map("staff_number") @db.VarChar(40)
  status      Int       @default(1) @db.SmallInt()
  categoryId  Int       @map("category_id")
  orderNumber Int?      @map("order_number")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @updatedAt @map("deleted_at")

  category                Category                  @relation(fields: [categoryId], references: [id])
  SubCategoryTranslations SubCategoryTranslations[]
  Organization            Organization[]
  OrganizationVersion     OrganizationVersion[]

  @@map("sub_category")
}

model SubCategoryTranslations {
  id            Int       @id @default(autoincrement())
  subCategoryId Int       @map("sub_category_id")
  languageCode  String    @map("language_code")
  name          String
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt     DateTime? @updatedAt @map("updated_at")

  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])

  @@map("sub_category_translations")
}

model MainOrganization {
  id                  Int                   @id @default(autoincrement())
  name                String
  staffNumber         String?               @map("staff_number") @db.VarChar(40)
  status              Int                   @default(1) @db.SmallInt()
  orderNumber         Int?                  @map("order_number")
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp
  updatedAt           DateTime?             @updatedAt @map("updated_at")
  deletedAt           DateTime?             @updatedAt @map("deleted_at")
  Organization        Organization[]
  OrganizationVersion OrganizationVersion[]

  @@map("main_organization")
}

model Segment {
  id                  Int                   @id @default(autoincrement())
  status              Int                   @default(1) @db.SmallInt()
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp
  updatedAt           DateTime?             @updatedAt @map("updated_at")
  deletedAt           DateTime?             @updatedAt @map("deleted_at")
  name                String
  orderNumber         Int?                  @map("order_number")
  Organization        Organization[]
  OrganizationVersion OrganizationVersion[]

  @@map("segment")
}

model ProductServiceCategory {
  id                                 Int                                  @id @default(autoincrement())
  staffNumber                        String?                              @map("staff_number") @db.VarChar(40)
  status                             Int                                  @default(1) @db.SmallInt()
  orderNumber                        Int?                                 @map("order_number")
  createdAt                          DateTime                             @default(now()) @map("created_at") @db.Timestamp
  updatedAt                          DateTime?                            @updatedAt @map("updated_at")
  deletedAt                          DateTime?                            @updatedAt @map("deleted_at")
  Product_service_sub_categories     ProductServiceSubCategory[]
  ProductServiceCategoryTranslations ProductServiceCategoryTranslations[]

  ProductServices        ProductServices[]
  ProductServicesVersion ProductServicesVersion[]

  @@map("product_service_category")
}

model ProductServiceCategoryTranslations {
  id                       Int       @id @default(autoincrement())
  productServiceCategoryId Int       @map("product_service_category_id")
  languageCode             String    @map("language_code")
  name                     String
  createdAt                DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt                DateTime? @updatedAt @map("updated_at")

  ProductServiceCategory ProductServiceCategory @relation(fields: [productServiceCategoryId], references: [id])

  @@map("product_service_category_translations")
}

model ProductServiceSubCategory {
  id                       Int       @id @default(autoincrement())
  staffNumber              String?   @map("staff_number") @db.VarChar(40)
  status                   Int       @default(1) @db.SmallInt()
  productServiceCategoryId Int       @map("product_service_category_id")
  orderNumber              Int?      @map("order_number")
  createdAt                DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt                DateTime? @updatedAt @map("updated_at")
  deletedAt                DateTime? @updatedAt @map("deleted_at")

  ProductServiceCategory                ProductServiceCategory                  @relation(fields: [productServiceCategoryId], references: [id])
  ProductServiceSubCategoryTranslations ProductServiceSubCategoryTranslations[]
  ProductServices                       ProductServices[]

  ProductServicesVersion ProductServicesVersion[]

  @@map("product_service_sub_category")
}

model ProductServiceSubCategoryTranslations {
  id                         Int       @id @default(autoincrement())
  productServicSubCategoryId Int       @map("product_service_sub_category_id")
  languageCode               String    @map("language_code")
  name                       String
  createdAt                  DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt                  DateTime? @updatedAt @map("updated_at")

  ProductServiceSubCategory ProductServiceSubCategory @relation(fields: [productServicSubCategoryId], references: [id])

  @@map("product_service_sub_category_translations")
}

model Region {
  id                  Int                   @id @default(autoincrement())
  status              Int                   @default(1) @db.SmallInt()
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp
  updatedAt           DateTime?             @updatedAt @map("updated_at")
  deletedAt           DateTime?             @updatedAt @map("deleted_at")
  City                City[]
  District            District[]
  RegionTranslations  RegionTranslations[]
  Nearby              Nearby[]
  Passage             Passage[]
  Area                Area[]
  Avenue              Avenue[]
  ResidentialArea     ResidentialArea[]
  Neighborhood        Neighborhood[]
  Impasse             Impasse[]
  Street              Street[]
  Village             Village[]
  Lane                Lane[]
  Organization        Organization[]
  OrganizationVersion OrganizationVersion[]
  Category            Category[]

  @@map("region")
}

model RegionTranslations {
  id           Int                      @id @default(autoincrement())
  regionId     Int                      @map("region_id")
  languageCode String                   @map("language_code")
  name         String
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime?                @updatedAt @map("updated_at")
  searchVector Unsupported("tsvector")? @map("search_vector")

  Region Region @relation(fields: [regionId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("region_translations")
}

model City {
  id                  Int                   @id @default(autoincrement())
  regionId            Int                   @map("region_id")
  status              Int                   @default(1) @db.SmallInt()
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp
  updatedAt           DateTime?             @updatedAt @map("updated_at")
  deletedAt           DateTime?             @updatedAt @map("deleted_at")
  Region              Region                @relation(fields: [regionId], references: [id])
  District            District[]
  CityTranslations    CityTranslations[]
  Nearby              Nearby[]
  Passage             Passage[]
  Area                Area[]
  Avenue              Avenue[]
  ResidentialArea     ResidentialArea[]
  Neighborhood        Neighborhood[]
  Impasse             Impasse[]
  Street              Street[]
  Village             Village[]
  Lane                Lane[]
  Organization        Organization[]
  category            Category[]
  OrganizationVersion OrganizationVersion[]

  @@map("city")
}

model CityTranslations {
  id           Int                      @id @default(autoincrement())
  cityId       Int                      @map("city_id")
  languageCode String                   @map("language_code")
  name         String
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime?                @updatedAt @map("updated_at")
  searchVector Unsupported("tsvector")? @map("search_vector")

  City City @relation(fields: [cityId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("city_translations")
}

model District {
  id          Int       @id @default(autoincrement())
  regionId    Int       @map("region_id")
  cityId      Int       @map("city_id")
  status      Int       @default(1) @db.SmallInt()
  index       String    @db.VarChar(1000)
  staffNumber String?   @map("staff_number") @db.VarChar(40)
  orderNumber Int?      @map("order_number")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("upd ated_at")
  deletedAt   DateTime? @updatedAt @map("deleted_at")

  Region                      Region                        @relation(fields: [regionId], references: [id])
  City                        City                          @relation(fields: [cityId], references: [id])
  DistrictTranslations        DistrictTranslations[]
  DistrictOldNameTranslations DistrictOldNameTranslations[]
  DistrictNewNameTranslations DistrictNewNameTranslations[]
  Passage                     Passage[]
  Area                        Area[]
  Avenue                      Avenue[]
  ResidentialArea             ResidentialArea[]
  Neighborhood                Neighborhood[]
  Impasse                     Impasse[]
  Street                      Street[]
  Village                     Village[]
  Lane                        Lane[]
  Organization                Organization[]
  OrganizationVersion         OrganizationVersion[]
  Category                    Category[]
  Nearby                      Nearby[]

  @@map("district")
}

model DistrictTranslations {
  id           Int                      @id @default(autoincrement())
  districtId   Int                      @map("district_id")
  languageCode String                   @map("language_code")
  name         String
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime?                @updatedAt @map("updated_at")
  searchVector Unsupported("tsvector")? @map("search_vector")

  District District @relation(fields: [districtId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("district_translations")
}

model DistrictOldNameTranslations {
  id           Int       @id @default(autoincrement())
  districtId   Int       @map("district_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  District District @relation(fields: [districtId], references: [id])

  @@map("district_new_name_translations")
}

model DistrictNewNameTranslations {
  id           Int       @id @default(autoincrement())
  districtId   Int       @map("district_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  District District @relation(fields: [districtId], references: [id])

  @@map("district_old_name_translations")
}

model NearbyCategory {
  id          Int       @id @default(autoincrement())
  name        String
  staffNumber String?   @map("staff_number") @db.VarChar(40)
  status      Int       @default(1) @db.SmallInt()
  orderNumber Int?      @map("order_number")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @updatedAt @map("deleted_at")
  Nearby      Nearby[]

  @@map("nearby_category")
}

model Nearby {
  id                 Int                  @id @default(autoincrement())
  staffNumber        String?              @map("staff_number") @db.VarChar(40)
  status             Int                  @default(1) @db.SmallInt()
  nearbyCategoryId   Int                  @map("nearby_category_id")
  regionId           Int                  @map("region_id")
  cityId             Int                  @map("city_id")
  districtId         Int?                 @map("district_id")
  orderNumber        Int?                 @map("order_number")
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamp
  updatedAt          DateTime?            @updatedAt @map("updated_at")
  deletedAt          DateTime?            @updatedAt @map("deleted_at")
  NearbyCategory     NearbyCategory       @relation(fields: [nearbyCategoryId], references: [id])
  Region             Region               @relation(fields: [regionId], references: [id])
  City               City                 @relation(fields: [cityId], references: [id])
  District           District?            @relation(fields: [districtId], references: [id])
  NearbyTranslations NearbyTranslations[]
  Nearbees           Nearbees[]
  NearbeesVersion    NearbeesVersion[]

  @@map("nearby")
}

model NearbyTranslations {
  id           Int                      @id @default(autoincrement())
  nearbyId     Int                      @map("nearby_id")
  languageCode String                   @map("language_code")
  name         String
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime?                @updatedAt @map("updated_at")
  searchVector Unsupported("tsvector")? @map("search_vector")

  Nearby Nearby @relation(fields: [nearbyId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("nearby_translations")
}

model Passage {
  id          Int       @id @default(autoincrement())
  regionId    Int       @map("region_id")
  cityId      Int       @map("city_id")
  districtId  Int?      @map("district_id")
  index       String    @db.VarChar(1000)
  status      Int       @default(1) @db.SmallInt()
  staffNumber String?   @map("staff_number") @db.VarChar(40)
  orderNumber Int?      @map("order_number")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  region                     Region                       @relation(fields: [regionId], references: [id])
  city                       City                         @relation(fields: [cityId], references: [id])
  district                   District?                    @relation(fields: [districtId], references: [id])
  PassageTranslations        PassageTranslations[]
  PassageOldNameTranslations PassageOldNameTranslations[]
  PassageNewNameTranslations PassageNewNameTranslations[]
  Organization               Organization[]

  @@map("passage")
}

model PassageTranslations {
  id           Int                      @id @default(autoincrement())
  passageId    Int                      @map("passage_id")
  languageCode String                   @map("language_code")
  name         String
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime?                @updatedAt @map("updated_at")
  searchVector Unsupported("tsvector")? @map("search_vector")

  Passage Passage @relation(fields: [passageId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("passage_translations")
}

model PassageOldNameTranslations {
  id           Int       @id @default(autoincrement())
  passageId    Int       @map("passage_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Passage Passage @relation(fields: [passageId], references: [id])

  @@map("passage_old_name_translations")
}

model PassageNewNameTranslations {
  id           Int       @id @default(autoincrement())
  passageId    Int       @map("passage_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Passage Passage @relation(fields: [passageId], references: [id])

  @@map("passage_new_name_translations")
}

model Area {
  id          Int       @id @default(autoincrement())
  regionId    Int       @map("region_id")
  cityId      Int       @map("city_id")
  districtId  Int?      @map("district_id")
  index       String    @db.VarChar(1000)
  status      Int       @default(1) @db.SmallInt()
  staffNumber String?   @map("staff_number") @db.VarChar(40)
  orderNumber Int?      @map("order_number")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  region                  Region                    @relation(fields: [regionId], references: [id])
  city                    City                      @relation(fields: [cityId], references: [id])
  district                District?                 @relation(fields: [districtId], references: [id])
  AreaTranslations        AreaTranslations[]
  AreaOldNameTranslations AreaOldNameTranslations[]
  AreaNewNameTranslations AreaNewNameTranslations[]
  Organization            Organization[]
  OrganizationVersion     OrganizationVersion[]

  @@map("area")
}

model AreaTranslations {
  id           Int                      @id @default(autoincrement())
  areaId       Int                      @map("area_id")
  languageCode String                   @map("language_code")
  name         String
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime?                @updatedAt @map("updated_at")
  searchVector Unsupported("tsvector")? @map("search_vector")

  Area Area @relation(fields: [areaId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("area_translations")
}

model AreaOldNameTranslations {
  id           Int       @id @default(autoincrement())
  areaId       Int       @map("area_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Area Area @relation(fields: [areaId], references: [id])

  @@map("area_old_name_translations")
}

model AreaNewNameTranslations {
  id           Int       @id @default(autoincrement())
  areaId       Int       @map("area_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Area Area @relation(fields: [areaId], references: [id])

  @@map("area_new_name_translations")
}

model Avenue {
  id          Int       @id @default(autoincrement())
  regionId    Int       @map("region_id")
  cityId      Int       @map("city_id")
  districtId  Int?      @map("district_id")
  index       String    @db.VarChar(1000)
  status      Int       @default(1) @db.SmallInt()
  staffNumber String?   @map("staff_number") @db.VarChar(40)
  orderNumber Int?      @map("order_number")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  region                    Region                      @relation(fields: [regionId], references: [id])
  city                      City                        @relation(fields: [cityId], references: [id])
  district                  District?                   @relation(fields: [districtId], references: [id])
  AvenueTranslations        AvenueTranslations[]
  AvenueOldNameTranslations AvenueOldNameTranslations[]
  AvenueNewNameTranslations AvenueNewNameTranslations[]
  Organization              Organization[]
  OrganizationVersion       OrganizationVersion[]

  @@map("avenue")
}

model AvenueTranslations {
  id           Int                      @id @default(autoincrement())
  avenueId     Int                      @map("avenue_id")
  languageCode String                   @map("language_code")
  name         String
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime?                @updatedAt @map("updated_at")
  searchVector Unsupported("tsvector")? @map("search_vector")

  Avenue Avenue @relation(fields: [avenueId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("avenue_translations")
}

model AvenueOldNameTranslations {
  id           Int       @id @default(autoincrement())
  avenueId     Int       @map("avenue_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Avenue Avenue @relation(fields: [avenueId], references: [id])

  @@map("avenue_old_name_translations")
}

model AvenueNewNameTranslations {
  id           Int       @id @default(autoincrement())
  avenueId     Int       @map("avenue_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Avenue Avenue @relation(fields: [avenueId], references: [id])

  @@map("avenue_new_name_translations")
}

model ResidentialArea {
  id          Int       @id @default(autoincrement())
  regionId    Int       @map("region_id")
  cityId      Int       @map("city_id")
  districtId  Int?      @map("district_id")
  index       String    @db.VarChar(1000)
  status      Int       @default(1) @db.SmallInt()
  staffNumber String?   @map("staff_number") @db.VarChar(40)
  orderNumber Int?      @map("order_number")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  region                             Region                               @relation(fields: [regionId], references: [id])
  city                               City                                 @relation(fields: [cityId], references: [id])
  district                           District?                            @relation(fields: [districtId], references: [id])
  ResidentialAreaTranslations        ResidentialAreaTranslations[]
  ResidentialAreaOldNameTranslations ResidentialAreaOldNameTranslations[]
  ResidentialAreaNewNameTranslations ResidentialAreaNewNameTranslations[]
  Organization                       Organization[]
  OrganizationVersion                OrganizationVersion[]

  @@map("residential_area")
}

model ResidentialAreaTranslations {
  id                Int                      @id @default(autoincrement())
  residentialAreaId Int                      @map("residential_area_id")
  languageCode      String                   @map("language_code")
  name              String
  createdAt         DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt         DateTime?                @updatedAt @map("updated_at")
  searchVector      Unsupported("tsvector")? @map("search_vector")

  ResidentialArea ResidentialArea @relation(fields: [residentialAreaId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("residential_area_translations")
}

model ResidentialAreaOldNameTranslations {
  id                Int       @id @default(autoincrement())
  residentialAreaId Int       @map("residential_area_id")
  languageCode      String    @map("language_code")
  name              String
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt         DateTime? @updatedAt @map("updated_at")

  ResidentialArea ResidentialArea @relation(fields: [residentialAreaId], references: [id])

  @@map("residential_area_old_name_translations")
}

model ResidentialAreaNewNameTranslations {
  id                Int       @id @default(autoincrement())
  residentialAreaId Int       @map("residential_area_id")
  languageCode      String    @map("language_code")
  name              String
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt         DateTime? @updatedAt @map("updated_at")

  ResidentialArea ResidentialArea @relation(fields: [residentialAreaId], references: [id])

  @@map("residential_area_new_name_translations")
}

model Neighborhood {
  id          Int       @id @default(autoincrement())
  regionId    Int       @map("region_id")
  cityId      Int       @map("city_id")
  districtId  Int?      @map("district_id")
  index       String    @db.VarChar(1000)
  status      Int       @default(1) @db.SmallInt()
  staffNumber String?   @map("staff_number") @db.VarChar(40)
  orderNumber Int?      @map("order_number")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  region                          Region                            @relation(fields: [regionId], references: [id])
  city                            City                              @relation(fields: [cityId], references: [id])
  district                        District?                         @relation(fields: [districtId], references: [id])
  NeighborhoodTranslations        NeighborhoodTranslations[]
  NeighborhoodOldNameTranslations NeighborhoodOldNameTranslations[]
  NeighborhoodNewNameTranslations NeighborhoodNewNameTranslations[]
  Organization                    Organization[]
  OrganizationVersion             OrganizationVersion[]

  @@map("neighborhood")
}

model NeighborhoodTranslations {
  id             Int       @id @default(autoincrement())
  neighborhoodId Int       @map("neighborhood_id")
  languageCode   String    @map("language_code")
  name           String
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime? @updatedAt @map("updated_at")

  Neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [id])

  @@map("neighborhood_translations")
}

model NeighborhoodOldNameTranslations {
  id             Int       @id @default(autoincrement())
  neighborhoodId Int       @map("neighborhood_id")
  languageCode   String    @map("language_code")
  name           String
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime? @updatedAt @map("updated_at")

  Neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [id])

  @@map("neighborhood_old_name_translations")
}

model NeighborhoodNewNameTranslations {
  id             Int       @id @default(autoincrement())
  neighborhoodId Int       @map("neighborhood_id")
  languageCode   String    @map("language_code")
  name           String
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime? @updatedAt @map("updated_at")

  Neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [id])

  @@map("neighborhood_new_name_translations")
}

model Impasse {
  id          Int       @id @default(autoincrement())
  regionId    Int       @map("region_id")
  cityId      Int       @map("city_id")
  districtId  Int?      @map("district_id")
  index       String    @db.VarChar(1000)
  status      Int       @default(1) @db.SmallInt()
  staffNumber String?   @map("staff_number") @db.VarChar(40)
  orderNumber Int?      @map("order_number")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  region                     Region                       @relation(fields: [regionId], references: [id])
  city                       City                         @relation(fields: [cityId], references: [id])
  district                   District?                    @relation(fields: [districtId], references: [id])
  ImpasseTranslations        ImpasseTranslations[]
  ImpasseOldNameTranslations ImpasseOldNameTranslations[]
  ImpasseNewNameTranslations ImpasseNewNameTranslations[]
  Organization               Organization[]
  OrganizationVersion        OrganizationVersion[]

  @@map("impasse")
}

model ImpasseTranslations {
  id           Int                      @id @default(autoincrement())
  impasseId    Int                      @map("impasse_id")
  languageCode String                   @map("language_code")
  name         String
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime?                @updatedAt @map("updated_at")
  searchVector Unsupported("tsvector")? @map("search_vector")

  Impasse Impasse @relation(fields: [impasseId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("impasse_translations")
}

model ImpasseOldNameTranslations {
  id           Int       @id @default(autoincrement())
  impasseId    Int       @map("impasse_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Impasse Impasse @relation(fields: [impasseId], references: [id])

  @@map("impasse_old_name_translations")
}

model ImpasseNewNameTranslations {
  id           Int       @id @default(autoincrement())
  impasseId    Int       @map("impasse_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Impasse Impasse @relation(fields: [impasseId], references: [id])

  @@map("impasse_new_name_translations")
}

model Village {
  id          Int       @id @default(autoincrement())
  regionId    Int       @map("region_id")
  cityId      Int       @map("city_id")
  districtId  Int?      @map("district_id")
  index       String    @db.VarChar(1000)
  status      Int       @default(1) @db.SmallInt()
  staffNumber String?   @map("staff_number") @db.VarChar(40)
  orderNumber Int?      @map("order_number")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  region                     Region                       @relation(fields: [regionId], references: [id])
  city                       City                         @relation(fields: [cityId], references: [id])
  district                   District?                    @relation(fields: [districtId], references: [id])
  VillageTranslations        VillageTranslations[]
  VillageOldNameTranslations VillageOldNameTranslations[]
  VillageNewNameTranslations VillageNewNameTranslations[]
  Organization               Organization[]
  OrganizationVersion        OrganizationVersion[]

  @@map("village")
}

model VillageTranslations {
  id           Int                      @id @default(autoincrement())
  villageId    Int                      @map("village_id")
  languageCode String                   @map("language_code")
  name         String
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime?                @updatedAt @map("updated_at")
  searchVector Unsupported("tsvector")? @map("search_vector")

  Village Village @relation(fields: [villageId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("village_translations")
}

model VillageOldNameTranslations {
  id           Int       @id @default(autoincrement())
  villageId    Int       @map("village_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Village Village @relation(fields: [villageId], references: [id])

  @@map("village_old_name_translations")
}

model VillageNewNameTranslations {
  id           Int       @id @default(autoincrement())
  villageId    Int       @map("village_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Village Village @relation(fields: [villageId], references: [id])

  @@map("village_new_name_translations")
}

model Lane {
  id                      Int                       @id @default(autoincrement())
  regionId                Int                       @map("region_id")
  cityId                  Int                       @map("city_id")
  districtId              Int?                      @map("district_id")
  index                   String                    @db.VarChar(1000)
  status                  Int                       @default(1) @db.SmallInt()
  staffNumber             String?                   @map("staff_number") @db.VarChar(40)
  orderNumber             Int?                      @map("order_number")
  createdAt               DateTime                  @default(now()) @map("created_at") @db.Timestamp
  updatedAt               DateTime?                 @updatedAt @map("updated_at")
  deletedAt               DateTime?                 @map("deleted_at")
  region                  Region                    @relation(fields: [regionId], references: [id])
  city                    City                      @relation(fields: [cityId], references: [id])
  district                District?                 @relation(fields: [districtId], references: [id])
  LaneTranslations        LaneTranslations[]
  LaneOldNameTranslations LaneOldNameTranslations[]
  LaneNewNameTranslations LaneNewNameTranslations[]
  Organization            Organization[]
  OrganizationVersion     OrganizationVersion[]

  @@map("lane")
}

model LaneTranslations {
  id           Int                      @id @default(autoincrement())
  laneId       Int                      @map("lane_id")
  languageCode String                   @map("language_code")
  name         String
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime?                @updatedAt @map("updated_at")
  searchVector Unsupported("tsvector")? @map("search_vector")

  Lane Lane @relation(fields: [laneId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("lane_translations")
}

model LaneOldNameTranslations {
  id           Int       @id @default(autoincrement())
  laneId       Int       @map("lane_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Lane Lane @relation(fields: [laneId], references: [id])

  @@map("lane_old_name_translations")
}

model LaneNewNameTranslations {
  id           Int       @id @default(autoincrement())
  laneId       Int       @map("lane_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Lane Lane @relation(fields: [laneId], references: [id])

  @@map("lane_new_name_translations")
}

model Street {
  id          Int       @id @default(autoincrement())
  regionId    Int       @map("region_id")
  cityId      Int       @map("city_id")
  districtId  Int?      @map("district_id")
  index       String    @db.VarChar(1000)
  status      Int       @default(1) @db.SmallInt()
  staffNumber String?   @map("staff_number") @db.VarChar(40)
  orderNumber Int?      @map("order_number")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  region                    Region                      @relation(fields: [regionId], references: [id])
  city                      City                        @relation(fields: [cityId], references: [id])
  district                  District?                   @relation(fields: [districtId], references: [id])
  StreetTranslations        StreetTranslations[]
  StreetOldNameTranslations StreetOldNameTranslations[]
  StreetNewNameTranslations StreetNewNameTranslations[]
  Organization              Organization[]
  OrganizationVersion       OrganizationVersion[]

  @@map("street")
}

model StreetTranslations {
  id           Int                      @id @default(autoincrement())
  streetId     Int                      @map("street_id")
  languageCode String                   @map("language_code")
  name         String
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime?                @updatedAt @map("updated_at")
  searchVector Unsupported("tsvector")? @map("search_vector")

  Street Street @relation(fields: [streetId], references: [id])

  @@index([searchVector], type: Gin)
  @@map("street_translations")
}

model StreetOldNameTranslations {
  id           Int       @id @default(autoincrement())
  streetId     Int       @map("street_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Street Street @relation(fields: [streetId], references: [id])

  @@map("street_old_name_translations")
}

model StreetNewNameTranslations {
  id           Int       @id @default(autoincrement())
  streetId     Int       @map("street_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Street Street @relation(fields: [streetId], references: [id])

  @@map("street_new_name_translations")
}

model PhoneTypes {
  id                     Int                      @id @default(autoincrement())
  staffNumber            String?                  @map("staff_number") @db.VarChar(40)
  status                 Int                      @default(1) @db.SmallInt()
  orderNumber            Int?                     @map("order_number")
  createdAt              DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt              DateTime?                @updatedAt @map("updated_at")
  deletedAt              DateTime?                @map("deleted_at")
  Phone                  Phone[]
  PhoneTypesTranslations PhoneTypesTranslations[]
  PhoneVersion           PhoneVersion[]

  @@map("phone_types")
}

model PhoneTypesTranslations {
  id           Int       @id @default(autoincrement())
  phoneTypesId Int       @map("phone_types_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  phoneTypes PhoneTypes @relation(fields: [phoneTypesId], references: [id])

  @@map("phone_types_id_translations")
}

model Organization {
  id                  Int                      @id @default(autoincrement())
  name                String                   @map("name") @db.VarChar()
  staffNumber         String?                  @map("staff_number") @db.VarChar()
  legalName           String?                  @map("legal_name") @db.VarChar()
  description         String?                  @map("description") @db.VarChar()
  secret              String?                  @map("secret") @db.Text()
  kvartal             String?                  @map("kvartal") @db.VarChar()
  address             String?                  @map("address") @db.VarChar()
  home                String?                  @map("home") @db.VarChar()
  apartment           String?                  @map("apartment") @db.VarChar()
  inn                 String?                  @map("inn") @db.VarChar()
  bankNumber          String?                  @map("bank_number") @db.VarChar()
  account             String?                  @map("account") @db.VarChar()
  mail                String?                  @map("mail") @db.VarChar()
  clientId            String?                  @unique() @map("client_id") @db.VarChar()
  manager             String?                  @map("manager") @db.VarChar()
  index               String?                  @db.VarChar(1000)
  workTime            Json?                    @map("work_time") @db.Json()
  transport           Json?                    @map("transport") @db.Json()
  createdBy           String                   @map("created_by") @db.VarChar()
  mainOrganizationId  Int?                     @map("main_organization_id")
  subCategoryId       Int?                     @map("sub_category_id")
  regionId            Int?                     @map("region_id")
  cityId              Int?                     @map("city_id")
  districtId          Int?                     @map("district_id")
  villageId           Int?                     @map("village_id")
  avenueId            Int?                     @map("avenue_id")
  residentialId       Int?                     @map("residential_id")
  neighborhoodId      Int?                     @map("neighborhood_id")
  areaId              Int?                     @map("area_id")
  streetId            Int?                     @map("street_id")
  laneId              Int?                     @map("lane_id")
  impasseId           Int?                     @map("impasse_id")
  segmentId           Int?                     @map("segment_id")
  passageId           Int?                     @map("passage_id")
  deleteReason        String?                  @map("delete_reason") @db.Text()
  status              Int?                     @map("status") @db.SmallInt()
  createdAt           DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt           DateTime?                @updatedAt @map("updated_at")
  deletedAt           DateTime?                @map("deleted_at")
  addressSearchVector Unsupported("tsvector")? @map("address_search_vector")

  MainOrganization    MainOrganization?     @relation(fields: [mainOrganizationId], references: [id])
  SubCategory         SubCategory?          @relation(fields: [subCategoryId], references: [id])
  Region              Region?               @relation(fields: [regionId], references: [id])
  City                City?                 @relation(fields: [cityId], references: [id])
  District            District?             @relation(fields: [districtId], references: [id])
  Village             Village?              @relation(fields: [villageId], references: [id])
  Avenue              Avenue?               @relation(fields: [avenueId], references: [id])
  ResidentialArea     ResidentialArea?      @relation(fields: [residentialId], references: [id])
  Neighborhood        Neighborhood?         @relation(fields: [neighborhoodId], references: [id])
  Area                Area?                 @relation(fields: [areaId], references: [id])
  Street              Street?               @relation(fields: [streetId], references: [id])
  Lane                Lane?                 @relation(fields: [laneId], references: [id])
  Impasse             Impasse?              @relation(fields: [impasseId], references: [id])
  Segment             Segment?              @relation(fields: [segmentId], references: [id])
  Passage             Passage?              @relation(fields: [passageId], references: [id])
  Picture             Picture[]
  Phone               Phone[]
  PaymentTypes        PaymentTypes[]
  OrganizationVersion OrganizationVersion[]
  ProductServices     ProductServices[]
  Nearbees            Nearbees[]

  @@index([addressSearchVector], type: Gin)
  @@map("organization")
}

model PaymentTypes {
  id             Int     @id @default(autoincrement())
  Cash           Boolean @map("cash") @db.Boolean()
  Terminal       Boolean @map("terminal") @db.Boolean()
  Transfer       Boolean @map("transfer") @db.Boolean()
  OrganizationId Int     @map("organization_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  Organization Organization @relation(fields: [OrganizationId], references: [id])

  @@map("payment_types")
}

model Picture {
  id             Int          @id @default(autoincrement())
  link           String       @map("link") @db.VarChar()
  OrganizationId Int          @map("organization_id")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime?    @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  Organization   Organization @relation(fields: [OrganizationId], references: [id])

  @@map("picture")
}

model Phone {
  id             Int          @id @default(autoincrement())
  phone          String       @map("phone") @db.VarChar()
  PhoneTypeId    Int?         @map("phone_type_id")
  isSecret       Boolean      @map("isSecret") @db.Boolean()
  OrganizationId Int          @map("organization_id")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime?    @updatedAt @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  Organization   Organization @relation(fields: [OrganizationId], references: [id])

  PhoneTypes PhoneTypes? @relation(fields: [PhoneTypeId], references: [id])

  @@map("phone")
}

model ProductServices {
  id                          Int                        @id @default(autoincrement())
  ProductServiceCategoryId    Int?                       @map("product_service_category_id")
  ProductServiceSubCategoryId Int?                       @map("product_service_sub_category_id")
  OrganizationId              Int                        @map("organization_id")
  createdAt                   DateTime                   @default(now()) @map("created_at") @db.Timestamp
  updatedAt                   DateTime?                  @updatedAt @map("updated_at")
  deletedAt                   DateTime?                  @map("deleted_at")
  ProductServiceCategory      ProductServiceCategory?    @relation(fields: [ProductServiceCategoryId], references: [id])
  ProductServiceSubCategory   ProductServiceSubCategory? @relation(fields: [ProductServiceSubCategoryId], references: [id])
  Organization                Organization               @relation(fields: [OrganizationId], references: [id])

  @@map("product_services")
}

model Nearbees {
  id                      Int                      @id @default(autoincrement())
  description             String?                  @map("description") @db.VarChar()
  NearbyId                Int                      @map("nearby_id")
  OrganizationId          Int                      @map("organization_version_id")
  createdAt               DateTime                 @default(now()) @map("created_at") @db.Timestamp
  updatedAt               DateTime?                @updatedAt @map("updated_at")
  deletedAt               DateTime?                @map("deleted_at")
  Nearby                  Nearby                   @relation(fields: [NearbyId], references: [id])
  Organization            Organization             @relation(fields: [OrganizationId], references: [id])
  descriptionSearchVector Unsupported("tsvector")? @map("description_search_vector")

  @@index([descriptionSearchVector], type: Gin)
  @@map("nearbees")
}

model OrganizationVersion {
  id                 Int       @id @default(autoincrement())
  name               String    @map("name") @db.VarChar()
  staffNumber        String?   @map("staff_number") @db.VarChar()
  legalName          String?   @map("legal_name") @db.VarChar()
  description        String?   @map("description") @db.VarChar()
  secret             String?   @map("secret") @db.Text()
  kvartal            String?   @map("kvartal") @db.VarChar()
  address            String?   @map("address") @db.VarChar()
  home               String?   @map("home") @db.VarChar()
  apartment          String?   @map("apartment") @db.VarChar()
  inn                String?   @map("inn") @db.VarChar()
  bankNumber         String?   @map("bank_number") @db.VarChar()
  account            String?   @map("account") @db.VarChar()
  mail               String?   @map("mail") @db.VarChar()
  clientId           String?   @unique() @map("client_id") @db.VarChar()
  manager            String?   @map("manager") @db.VarChar()
  index              String?   @db.VarChar(1000)
  workTime           Json?     @map("work_time") @db.Json()
  transport          Json?     @map("transport") @db.Json()
  createdBy          String    @map("created_by") @db.VarChar()
  mainOrganizationId Int?      @map("main_organization_id") @db.Integer()
  subCategoryId      Int?      @map("sub_category_id") @db.Integer()
  regionId           Int?      @map("region_id") @db.Integer()
  cityId             Int?      @map("city_id") @db.Integer()
  districtId         Int?      @map("district_id") @db.Integer()
  villageId          Int?      @map("village_id") @db.Integer()
  avenueId           Int?      @map("avenue_id") @db.Integer()
  residentialId      Int?      @map("residential_id") @db.Integer()
  neighborhoodId     Int?      @map("neighborhood_id")
  areaId             Int?      @map("area_id") @db.Integer()
  streetId           Int?      @map("street_id") @db.Integer()
  laneId             Int?      @map("lane_id") @db.Integer()
  impasseId          Int?      @map("impasse_id") @db.Integer()
  segmentId          Int?      @map("segment_id") @db.Integer()
  passageId          Int?      @map("passage_id") @db.Integer()
  organizationId     Int       @map("organization_id") @db.Integer()
  method             String?   @map("method") @db.VarChar()
  rejectReason       String?   @map("reject_reason") @db.VarChar()
  deleteReason       String?   @map("delete_reason") @db.Text()
  status             Int?      @map("status") @db.SmallInt()
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")

  MainOrganization MainOrganization? @relation(fields: [mainOrganizationId], references: [id])
  SubCategory      SubCategory?      @relation(fields: [subCategoryId], references: [id])
  Region           Region?           @relation(fields: [regionId], references: [id])
  City             City?             @relation(fields: [cityId], references: [id])
  District         District?         @relation(fields: [districtId], references: [id])
  Village          Village?          @relation(fields: [villageId], references: [id])
  Avenue           Avenue?           @relation(fields: [avenueId], references: [id])
  ResidentialArea  ResidentialArea?  @relation(fields: [residentialId], references: [id])
  Neighborhood     Neighborhood?     @relation(fields: [neighborhoodId], references: [id])
  Area             Area?             @relation(fields: [areaId], references: [id])
  Street           Street?           @relation(fields: [streetId], references: [id])
  Lane             Lane?             @relation(fields: [laneId], references: [id])
  Impasse          Impasse?          @relation(fields: [impasseId], references: [id])
  Segment          Segment?          @relation(fields: [segmentId], references: [id])
  Organization     Organization      @relation(fields: [organizationId], references: [id])

  PictureVersion         PictureVersion[]
  PhoneVersion           PhoneVersion[]
  PaymentTypesVersion    PaymentTypesVersion[]
  ProductServicesVersion ProductServicesVersion[]
  NearbeesVersion        NearbeesVersion[]

  @@map("organization_version")
}

model PictureVersion {
  id                    Int                 @id @default(autoincrement())
  link                  String              @map("link") @db.VarChar()
  OrganizationVersionId Int                 @map("organization_version_id")
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamp
  updatedAt             DateTime?           @updatedAt @map("updated_at")
  deletedAt             DateTime?           @map("deleted_at")
  OrganizationVersion   OrganizationVersion @relation(fields: [OrganizationVersionId], references: [id])

  @@map("picture_version")
}

model PhoneVersion {
  id                    Int                 @id @default(autoincrement())
  phone                 String              @map("phone") @db.VarChar()
  PhoneTypeId           Int?                @map("phone_type_id") @db.Integer()
  isSecret              Boolean             @map("isSecret") @db.Boolean()
  OrganizationVersionId Int                 @map("organization_version_id")
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamp
  updatedAt             DateTime?           @updatedAt @map("updated_at")
  deletedAt             DateTime?           @map("deleted_at")
  OrganizationVersion   OrganizationVersion @relation(fields: [OrganizationVersionId], references: [id])
  PhoneTypes            PhoneTypes?         @relation(fields: [PhoneTypeId], references: [id])

  @@map("phone_version")
}

model PaymentTypesVersion {
  id                    Int     @id @default(autoincrement())
  Cash                  Boolean @map("cash") @db.Boolean()
  Terminal              Boolean @map("terminal") @db.Boolean()
  Transfer              Boolean @map("transfer") @db.Boolean()
  OrganizationVersionId Int     @map("organization_version_id")

  createdAt           DateTime            @default(now()) @map("created_at") @db.Timestamp
  updatedAt           DateTime?           @updatedAt @map("updated_at")
  deletedAt           DateTime?           @map("deleted_at")
  OrganizationVersion OrganizationVersion @relation(fields: [OrganizationVersionId], references: [id])

  @@map("payment_types_version")
}

model ProductServicesVersion {
  id                          Int                        @id @default(autoincrement())
  ProductServiceCategoryId    Int?                       @map("product_service_category_id")
  ProductServiceSubCategoryId Int?                       @map("product_service_sub_category_id")
  OrganizationVersionId       Int                        @map("organization_version_id")
  createdAt                   DateTime                   @default(now()) @map("created_at") @db.Timestamp
  updatedAt                   DateTime?                  @updatedAt @map("updated_at")
  deletedAt                   DateTime?                  @map("deleted_at")
  ProductServiceCategory      ProductServiceCategory?    @relation(fields: [ProductServiceCategoryId], references: [id])
  ProductServiceSubCategory   ProductServiceSubCategory? @relation(fields: [ProductServiceSubCategoryId], references: [id])
  OrganizationVersion         OrganizationVersion        @relation(fields: [OrganizationVersionId], references: [id])

  @@map("product_services_version")
}

model NearbeesVersion {
  id                    Int                 @id @default(autoincrement())
  description           String?             @map("description") @db.VarChar()
  NearbyId              Int                 @map("nearby_id")
  OrganizationVersionId Int                 @map("organization_version_id")
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamp
  updatedAt             DateTime?           @updatedAt @map("updated_at")
  deletedAt             DateTime?           @map("deleted_at")
  Nearby                Nearby?             @relation(fields: [NearbyId], references: [id])
  OrganizationVersion   OrganizationVersion @relation(fields: [OrganizationVersionId], references: [id])

  @@map("nearbees_version")
}

model AdditionalCategory {
  id                             Int                              @id @default(autoincrement())
  staffNumber                    String?                          @map("staff_number") @db.VarChar(40)
  status                         Int                              @default(1) @db.SmallInt()
  createdAt                      DateTime                         @default(now()) @map("created_at") @db.Timestamp
  updatedAt                      DateTime?                        @updatedAt @map("updated_at")
  deletedAt                      DateTime?                        @map("deleted_at")
  AdditionalCategoryTranslations AdditionalCategoryTranslations[]
  Additional                     Additional[]

  @@map("additional_category")
}

model AdditionalCategoryTranslations {
  id                   Int       @id @default(autoincrement())
  additionalCategoryId Int       @map("additional_category_id")
  languageCode         String    @map("language_code")
  name                 String
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt            DateTime? @updatedAt @map("updated_at")

  AdditionalCategory AdditionalCategory @relation(fields: [additionalCategoryId], references: [id])

  @@map("additional_category_translations")
}

model Additional {
  id                   Int       @id @default(autoincrement())
  staffNumber          String?   @map("staff_number") @db.VarChar(40)
  additionalCategoryId Int       @map("additional_category_id")
  status               Int       @default(1) @db.SmallInt()
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt            DateTime? @updatedAt @map("updated_at")
  deletedAt            DateTime? @map("deleted_at")

  AdditionalCategory            AdditionalCategory              @relation(fields: [additionalCategoryId], references: [id])
  AdditionalTranslations        AdditionalTranslations[]
  AdditionalWarningTranslations AdditionalWarningTranslations[]
  AdditionalMentionTranslations AdditionalMentionTranslations[]
  AdditionalContent             AdditionalContent[]
  AdditionalTable               AdditionalTable[]

  @@map("additional")
}

model AdditionalTranslations {
  id           Int       @id @default(autoincrement())
  additionalId Int       @map("additional_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Additional Additional @relation(fields: [additionalId], references: [id])

  @@map("additional_translations")
}

model AdditionalWarningTranslations {
  id           Int       @id @default(autoincrement())
  additionalId Int       @map("additional_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Additional Additional @relation(fields: [additionalId], references: [id])

  @@map("additional_warning_translations")
}

model AdditionalMentionTranslations {
  id           Int       @id @default(autoincrement())
  additionalId Int       @map("additional_id")
  languageCode String    @map("language_code")
  name         String
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")

  Additional Additional @relation(fields: [additionalId], references: [id])

  @@map("additional_mention_translations")
}

model AdditionalContent {
  id           Int       @id @default(autoincrement())
  additionalId Int       @map("additional_id")
  status       Int       @default(1) @db.SmallInt()
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  Additional                           Additional                             @relation(fields: [additionalId], references: [id], onDelete: Cascade)
  AdditionalContentNameTranslations    AdditionalContentNameTranslations[]
  AdditionalContentContentTranslations AdditionalContentContentTranslations[]

  @@map("additional_content")
}

model AdditionalContentNameTranslations {
  id                  Int       @id @default(autoincrement())
  additionalContentId Int       @map("additional_content_id")
  languageCode        String    @map("language_code")
  name                String
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt           DateTime? @updatedAt @map("updated_at")

  AdditionalContent AdditionalContent @relation(fields: [additionalContentId], references: [id], onDelete: Cascade)

  @@map("additional_content_name_translations")
}

model AdditionalContentContentTranslations {
  id                  Int       @id @default(autoincrement())
  additionalContentId Int       @map("additional_content_id")
  languageCode        String    @map("language_code")
  name                String
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt           DateTime? @updatedAt @map("updated_at")

  AdditionalContent AdditionalContent @relation(fields: [additionalContentId], references: [id], onDelete: Cascade)

  @@map("additional_content_content_translations")
}

model AdditionalTable {
  id           Int       @id @default(autoincrement())
  additionalId Int       @map("additional_id")
  status       Int       @default(1) @db.SmallInt()
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime? @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  Additional                         Additional                           @relation(fields: [additionalId], references: [id])
  AdditionalTableNameTranslations    AdditionalTableNameTranslations[]
  AdditionalTableContentTranslations AdditionalTableContentTranslations[]

  @@map("additional_table")
}

model AdditionalTableNameTranslations {
  id                Int       @id @default(autoincrement())
  additionalTableId Int       @map("additional_table_id")
  languageCode      String    @map("language_code")
  name              String
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt         DateTime? @updatedAt @map("updated_at")

  AdditionalTable AdditionalTable @relation(fields: [additionalTableId], references: [id], onDelete: Cascade)

  @@map("additional_table_name_translations")
}

model AdditionalTableContentTranslations {
  id                Int       @id @default(autoincrement())
  additionalTableId Int       @map("additional_table_id")
  languageCode      String    @map("language_code")
  name              String
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt         DateTime? @updatedAt @map("updated_at")

  AdditionalTable AdditionalTable @relation(fields: [additionalTableId], references: [id], onDelete: Cascade)

  @@map("additional_table_content_translations")
}

model ApiLogs {
  id               Int       @id @default(autoincrement())
  userId           Int       @map("user_id")
  userNumericId    String?   @map("user_numeric_id") @db.VarChar(15)
  userFullName     String?   @map("user_full_name") @db.VarChar(300)
  userRole         String?   @map("user_role") @db.VarChar(50)
  organizationId   Int?      @map("organization_id")
  organizationName String?   @map("organization_name") @db.VarChar()
  method           String?   @db.VarChar(50)
  path             String?   @db.VarChar(150)
  request          String?
  response         String?
  status           Int?
  duration         Int?      @db.SmallInt()
  createdAt        DateTime? @default(now()) @map("created_at")

  @@map("api_logs")
}
